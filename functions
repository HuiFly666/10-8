import torch  

def train(model, train_loader, optimizer, criterion, device):  
    model.train()  # 设置模型为训练模式  
    running_loss = 0.0  
    
    for features, labels in train_loader:  
        features, labels = features.to(device), labels.to(device)  # 将数据转移到GPU或CPU  
        optimizer.zero_grad()  # 清空梯度  

        outputs, _ = model(features)  # 前向传播  
        outputs = outputs.squeeze()  # 去掉多余维度  
        loss = criterion(outputs, labels.float())  # 计算损失  
        loss.backward()  # 反向传播  
        optimizer.step()  # 更新参数  

        running_loss += loss.item()  

    epoch_loss = running_loss / len(train_loader)  # 计算每个epoch的平均损失  
    return epoch_loss  # 返回损失

    def validate(model, valid_loader, criterion, device):  
    model.eval()  # 设置模型为评估模式  
    running_loss = 0.0  
    correct = 0  
    total = 0  

    with torch.no_grad():  # 不需要计算梯度  
        for features, labels in valid_loader:  
            features, labels = features.to(device), labels.to(device)  

            outputs, _ = model(features)  # 前向传播  
            outputs = outputs.squeeze()  
            loss = criterion(outputs, labels.float())  # 计算损失  

            running_loss += loss.item()  
            predicted = (torch.sigmoid(outputs) > 0.5).float()  # 根据阈值判断  
            total += labels.size(0)  
            correct += (predicted == labels).sum().item()  

    epoch_loss = running_loss / len(valid_loader)  
    accuracy = 100 * correct / total  # 计算准确率  
    return epoch_loss, accuracy  # 返回损失和准确率

def test(model, test_loader, device):  
    model.eval()  # 设置模型为评估模式  
    correct = 0  
    total = 0  

    with torch.no_grad():  # 不需要计算梯度  
        for features, labels in test_loader:  
            features, labels = features.to(device), labels.to(device)  

            outputs, _ = model(features)  # 前向传播  
            outputs = outputs.squeeze()  
            predicted = (torch.sigmoid(outputs) > 0.5).float()  # 根据阈值判断  

            total += labels.size(0)  
            correct += (predicted == labels).sum().item()  

    accuracy = 100 * correct / total  # 计算准确率  
    return accuracy  # 返回测试集准确率

  # 假设您已经有了 train_loader、valid_loader 和 test_loader  
num_epochs = 20  
for epoch in range(num_epochs):  
    train_loss = train(model, train_loader, optimizer, criterion, device)  
    valid_loss, valid_accuracy = validate(model, valid_loader, criterion, device)  

    print(f'Epoch [{epoch+1}/{num_epochs}], Train Loss: {train_loss:.4f}, '  
          f'Valid Loss: {valid_loss:.4f}, Valid Accuracy: {valid_accuracy:.2f}%')  

# 最终测试  
test_accuracy = test(model, test_loader, device)  
print(f'Test Accuracy: {test_accuracy:.2f}%')
